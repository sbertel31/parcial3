name: Container Vulnerability Audit

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '18 9 * * 3'  # Todos los mi칠rcoles a las 09:18 UTC

permissions:
  contents: read
  security-events: write

jobs:
  container-scan:
    name: Run Snyk Scan on Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Obtener el c칩digo fuente
        uses: actions/checkout@v4

      - name: Construir imagen Docker para an치lisis
        run: docker build -t audited-image .

      - name: Instalar CLI de Snyk
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Ejecutar an치lisis de contenedor con Snyk
        id: container-scan
        continue-on-error: true
        run: |
          snyk container test audited-image \
            --file=Dockerfile \
            --sarif-file-output=report.sarif || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Verificar si existe el archivo SARIF
        run: |
          if [ -f "report.sarif" ]; then
            echo "Archivo SARIF generado correctamente"
            echo "Contenido del archivo:"
            head -20 report.sarif
          else
            echo "No se gener칩 el archivo SARIF"
            echo "Creando archivo SARIF vac칤o para evitar errores..."
            cat > report.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Snyk Container",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Validar y limpiar archivo SARIF
        run: |
          echo "游댢 Procesando archivo SARIF..."
          
          # Verificar si el archivo es v치lido JSON
          if ! jq empty report.sarif 2>/dev/null; then
            echo "El archivo SARIF no es un JSON v치lido"
            exit 1
          fi
          
          # Limpiar valores nulos y corregir campos problem치ticos
          jq '
            walk(
              if type == "object" then
                if has("securitySeverity") and (.securitySeverity == null or .securitySeverity == "") then
                  .securitySeverity = "5.0"
                elif has("level") and (.level == null or .level == "") then
                  .level = "warning"
                else
                  .
                end
              else
                .
              end
            )
          ' report.sarif > sanitized.sarif
          
          # Verificar que el archivo sanitizado es v치lido
          if jq empty sanitized.sarif 2>/dev/null; then
            echo "Archivo SARIF sanitizado correctamente"
          else
            echo "Error al sanitizar el archivo SARIF"
            exit 1
          fi

      - name: Mostrar resumen del an치lisis
        if: always()
        run: |
          if [ -f "sanitized.sarif" ]; then
            echo "Resumen del an치lisis de seguridad:"
            TOTAL_RESULTS=$(jq '.runs[0].results | length' sanitized.sarif 2>/dev/null || echo "0")
            echo "Total de vulnerabilidades encontradas: $TOTAL_RESULTS"
            
            if [ "$TOTAL_RESULTS" -gt 0 ]; then
              echo "游댌 Tipos de problemas encontrados:"
              jq -r '.runs[0].results[].level // "unknown"' sanitized.sarif 2>/dev/null | sort | uniq -c || echo "No se pudieron extraer los niveles"
            fi
          fi

      - name: Publicar resultados en GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sanitized.sarif
          category: snyk-container-scan
